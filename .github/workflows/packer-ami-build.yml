name: Packer AMI Build and Deploy

on:
  push:
    branches:
      - main  # Adjust this if your pull requests are merged into a different branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # ------------------ Configure AWS Credentials for Dev Account ------------------
      - name: Configure AWS credentials for Dev Account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1  # Adjust the region as needed

      # Setup Packer
      - name: Setup Packer
        uses: hashicorp/setup-packer@v2
        with:
          packer_version: '1.9.4'

      # Create webapp.zip
      - name: Create webapp.zip
        run: |
          zip -r webapp.zip . -x "*.git*" "packer-template/*" ".github/*"
          mv webapp.zip packer-template/

      # List repository contents
      - name: List repository contents
        run: |
          echo "Root directory contents:"
          ls -la
          echo "packer-template directory contents:"
          ls -la packer-template

      # Check necessary files
      - name: Check necessary files
        run: |
          for file in webapp.zip my-app.service install_webapp.sh; do
            if [ ! -f "packer-template/$file" ]; then
              echo "$file not found in packer-template directory"
              echo "Current directory structure:"
              find . -type f
              exit 1
            fi
          done

      # Create variables file
      - name: Create variables file
        run: |
          cat << EOF > packer-template/variables.pkrvars.hcl
          aws_region    = "us-east-1"              # Adjust if necessary
          instance_type = "t2.small"
          ssh_username  = "ubuntu"
          source_ami    = "ami-0866a3c8686eaeeba"  # Confirm if this is the desired AMI
          subnet_id     = "subnet-063beaf3ff4e82a4d"     # Replace with your actual Subnet ID
          EOF

      # Initialize Packer
      - name: Initialize Packer
        run: |
          cd packer-template
          packer init ubuntu-mysql.pkr.hcl

      # Validate Packer Template
      - name: Validate Packer Template
        run: |
          cd packer-template
          packer validate -var-file=variables.pkrvars.hcl ubuntu-mysql.pkr.hcl

      # Build AMI
      - name: Build AMI
        run: |
          cd packer-template
          packer build -var-file=variables.pkrvars.hcl ubuntu-mysql.pkr.hcl

      # Get AMI ID
      - name: Get AMI ID
        id: get-ami-id
        run: |
          AMI_ID=$(jq -r '.builds[-1].artifact_id' packer-template/manifest.json | cut -d ":" -f2)
          if [ -z "$AMI_ID" ]; then
            echo "Error: AMI ID not found."
            exit 1
          fi
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      # Share AMI with Demo Account
      - name: Share AMI with Demo Account
        run: |
          AMI_ID="${{ env.AMI_ID }}"
          DEMO_ACCOUNT_ID="${{ secrets.AWS_DEMO_ACCOUNT_ID }}"  # Store in GitHub Secrets
          aws ec2 modify-image-attribute \
            --image-id "$AMI_ID" \
            --launch-permission "Add=[{UserId=$DEMO_ACCOUNT_ID}]"
          echo "Shared AMI '$AMI_ID' with account '$DEMO_ACCOUNT_ID'."

      # ------------------ Switch to Demo Account for Deployment ------------------

      # Configure AWS Credentials for Demo Account
      - name: Configure AWS credentials for Demo Account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: us-east-1  # Adjust the region as needed

      # Fetch Launch Template ID
      - name: Get Launch Template ID
        id: get_launch_template
        run: |
          LAUNCH_TEMPLATE_NAME="demo-app-lb"  # Replace with your actual Launch Template name
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=$LAUNCH_TEMPLATE_NAME" \
            --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          if [ -z "$LAUNCH_TEMPLATE_ID" ]; then
            echo "Error: Launch Template ID not found."
            exit 1
          fi
          echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV

      # Set Auto Scaling Group Name directly
      - name: Set Auto Scaling Group Name
        run: |
          ASG_NAME="demo-app-asg"  # Replace with your actual ASG name
          if [ -z "$ASG_NAME" ]; then
            echo "Error: Auto Scaling Group name is not set."
            exit 1
          fi
          echo "ASG_NAME=$ASG_NAME" >> $GITHUB_ENV

      # Create a new Launch Template version with the latest AMI ID
      - name: Create new Launch Template version
        id: create_lt_version
        run: |
          AMI_ID="${{ env.AMI_ID }}"
          LAUNCH_TEMPLATE_ID="${{ env.LAUNCH_TEMPLATE_ID }}"
          LT_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id "$LAUNCH_TEMPLATE_ID" \
            --source-version '$Latest' \
            --version-description 'New version with latest AMI' \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' --output text)
          if [ -z "$LT_VERSION" ]; then
            echo "Error: Failed to create new Launch Template version."
            exit 1
          fi
          echo "LT_VERSION=$LT_VERSION" >> $GITHUB_ENV

      # Update the Auto Scaling Group to use the latest Launch Template version
      - name: Update Auto Scaling Group
        run: |
          LAUNCH_TEMPLATE_ID="${{ env.LAUNCH_TEMPLATE_ID }}"
          LT_VERSION="${{ env.LT_VERSION }}"
          ASG_NAME="${{ env.ASG_NAME }}"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "$ASG_NAME" \
            --launch-template "LaunchTemplateId=$LAUNCH_TEMPLATE_ID,Version=$LT_VERSION"
          echo "Updated Auto Scaling Group '$ASG_NAME' to use Launch Template version '$LT_VERSION'."

      # Start an instance refresh on the Auto Scaling Group
      - name: Start Instance Refresh
        id: start_instance_refresh
        run: |
          ASG_NAME="${{ env.ASG_NAME }}"
          INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$ASG_NAME" \
            --preferences '{
              "MinHealthyPercentage": 90,
              "InstanceWarmup": 300
            }' \
            --query 'InstanceRefreshId' --output text)
          if [ -z "$INSTANCE_REFRESH_ID" ]; then
            echo "Error: Failed to start instance refresh."
            exit 1
          fi
          echo "INSTANCE_REFRESH_ID=$INSTANCE_REFRESH_ID" >> $GITHUB_ENV

      # Wait for the instance refresh to complete and match the workflow status
      - name: Wait for Instance Refresh to Complete
        run: |
          ASG_NAME="${{ env.ASG_NAME }}"
          INSTANCE_REFRESH_ID="${{ env.INSTANCE_REFRESH_ID }}"
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --instance-refresh-ids "$INSTANCE_REFRESH_ID" \
              --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$STATUS" == "Successful" ]; then
              echo "Instance refresh completed successfully."
              exit 0
            elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled."
              exit 1
            else
              echo "Current status: $STATUS. Waiting for completion..."
              sleep 30
            fi
          done

      # -------------------- Remaining Steps --------------------

      - name: Clean up
        if: always()
        run: |
          rm -f packer-template/webapp.zip

      - name: Debug Output
        if: failure()
        run: |
          echo "Packer template contents:"
          cat packer-template/ubuntu-mysql.pkr.hcl
          echo "Variables file contents:"
          cat packer-template/variables.pkrvars.hcl
