name: Packer AMI Build

on:
  push:
    branches:
      - main

jobs:
  build-ami:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.4"

      - name: List directory contents
        run: ls -la

      - name: Copy necessary files
        run: |
          if [ -f "webapp.zip" ]; then
            cp webapp.zip packer-template/
          else
            echo "webapp.zip not found"
            exit 1
          fi
          
          if [ -f "my-app.service" ]; then
            cp my-app.service packer-template/
          else
            echo "my-app.service not found"
            exit 1
          fi
          
          if [ -f "install_webapp.sh" ]; then
            cp install_webapp.sh packer-template/
          else
            echo "install_webapp.sh not found"
            exit 1
          fi

      - name: Create variables file
        run: |
          cat << EOF > packer-template/variables.pkrvars.hcl
          aws_region = "us-east-1"
          source_ami = "$(aws ec2 describe-images --owners amazon --filters 'Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-24.04-amd64-server-*' 'Name=state,Values=available' --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)"
          instance_type = "t2.micro"
          ssh_username = "ubuntu"
          ami_users = "${{ secrets.DEMO_ACCOUNT_ID }}"
          db_host = "${{ secrets.DB_HOST }}"
          db_user = "${{ secrets.DB_USER }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          db_name = "${{ secrets.DB_NAME }}"
          db_port = "${{ secrets.DB_PORT }}"
          EOF

      - name: Initialize Packer
        run: packer init ./packer-template/ubuntu-mysql.pkr.hcl

      - name: Build AMI
        run: |
          cd packer-template
          packer build -var-file=variables.pkrvars.hcl ubuntu-mysql.pkr.hcl

      - name: Get AMI ID
        id: get-ami-id
        run: |
          AMI_ID=$(jq -r '.builds[-1].artifact_id' packer-template/manifest.json | cut -d ":" -f2)
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

      - name: Share AMI with DEMO account
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ steps.get-ami-id.outputs.ami_id }} \
            --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }}}]"

      - name: Clean up
        if: always()
        run: |
          rm -f packer-template/webapp.zip
          rm -f packer-template/my-app.service
          rm -f packer-template/install_webapp.sh